# -*- coding: utf-8 -*-
"""IP Scan.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1W2g4fmyz6pm0CvBirASHXf0kwBoaa8yK
"""

import socket
from concurrent.futures import ThreadPoolExecutor

def ping_ip(ip, port=80):
    """Attempt to connect to the given IP address on the specified port."""
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(1)
        sock.connect((ip, port))
    except (socket.timeout, socket.error):
        return False
    else:
        return True
    finally:
        sock.close()

def scan_network(start_ip, end_ip):
    """Scan a range of IP addresses from start_ip to end_ip."""
    active_ips = []
    # Create thread pool outside of the loop
    with ThreadPoolExecutor(max_workers=100) as executor:
        futures = []
        # Generate a list of IP addresses to scan
        for i in range(int(start_ip.split('.')[-1]), int(end_ip.split('.')[-1]) + 1):
            ip = f"{'.'.join(start_ip.split('.')[:-1])}.{i}"
            futures.append(executor.submit(ping_ip, ip))
        # Collect results
        for future, ip in zip(futures, [f"{'.'.join(start_ip.split('.')[:-1])}.{i}" for i in range(int(start_ip.split('.')[-1]), int(end_ip.split('.')[-1]) + 1)]):
            if future.result():
                active_ips.append(ip)
                print(f"{ip} is active.")
    return active_ips

if __name__ == "__main__":
    start_ip = "192.168.0.1"  # Change this to your starting IP
    end_ip = "192.168.0.113"   # Change this to your ending IP
    print("Scanning network...")
    active_ips = scan_network(start_ip, end_ip)
    print(f"Active IPs: {active_ips}")